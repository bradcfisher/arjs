
plugins {
	id "com.moowork.node" version "1.3.1"
	id "com.moowork.gulp" version "1.3.0"
}

repositories {
    jcenter()
}

node {
	// Version of node to use.
	version = '10.15.3'

	// Version of npm to use.
	//npmVersion = '2.1.5'

	// Version of Yarn to use.
	//yarnVersion = '0.16.1'

	// Base URL for fetching node distributions (change if you have a mirror).
	//distBaseUrl = 'https://nodejs.org/dist'

	// If true, it will download node using above parameters.
	// If false, it will try to use globally installed node.
	download = true

	// Set the work directory for unpacking node
	//workDir = file("${project.buildDir}/nodejs")

	// Set the work directory for NPM
	npmWorkDir = file("${project.buildDir}/npm")

	// Set the work directory for Yarn
	//yarnWorkDir = file("${project.buildDir}/yarn")

	// Set the work directory where node_modules should be located
	//nodeModulesDir = file("${project.projectDir}")
}

gulp {
	colors = true
	//workDir = project.projectDir
	//bufferedOutput = true	// Buffers output and writes it all at the end (for parallel tasks)
}

task clean(type: Delete) {
	group = "clean"
	description = "Removes the build folder so it is completely rebuilt by the next build"
	delete project.buildDir
	followSymlinks = false
}

task cleanNodeModules(type: Delete) {
	group = "clean"
	description = "Removes the node_modules folder so it is completely rebuilt by the next npm install"
	delete "${node.nodeModulesDir}/node_modules"
	followSymlinks = false
}

task cleanNode(type: Delete, dependsOn: ['cleanNodeModules']) {
	group = "clean"
	description = "Removes locally installed node.js, along with npm and all modules"
	doFirst {
		println "Node bin dir="+ node.variant.nodeBinDir.getAbsolutePath()
		delete node.variant.nodeBinDir.getAbsolutePath()
	}
}

task setupNodeTools(dependsOn: [ 'installGulp', 'npmInstall' ]) {
  description = "Ensures Node, NPM and Gulp are installed into the project's .gradle folder"
}

task build(type: GulpTask, dependsOn: [ 'setupNodeTools' ]) {
	description = "Builds all node/javascript/typescript source files";
	group = "build";
	inputs.file "gulpfile.js"
	inputs.file "tsconfig.json"
	inputs.file "package.json"
	inputs.dir "src/main"
	outputs.dir project.buildDir
	args = [ 'build' ];
}

task watch(type: GulpTask, dependsOn: [ 'setupNodeTools' ]) {
	description = "Builds all node/javascript/typescript source files, waits and rebuilds on changes";
	group = "build";
	inputs.files(build.inputs)
	inputs.files(build.outputs)
	args = [ "watch" ];
}

task test(type: GulpTask, dependsOn: [ 'setupNodeTools' ]) {
	description = "Runs tests and code coverage on the typescript source files";
	group = "test";
	inputs.files(build.inputs)
	//outputs.files()
	args = [ "test" ];
}

task typedoc(type: GulpTask, dependsOn: [ 'setupNodeTools' ]) {
	description = "Builds typedoc API documentation from the source typescript files";
	group = "documentation";
	inputs.files(build.inputs)
	outputs.dir new File(new File(project.buildDir, "docs"), "typedoc")
	args = [ 'typedoc' ];
}
